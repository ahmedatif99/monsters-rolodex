{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monester","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filterdMonsters","filter","monster","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAM,SAACC,GAAD,OACf,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACvB,6BAAKL,EAAMI,SAASE,OACpB,4BAAIN,EAAMI,SAASG,aCJdC,G,MAAW,SAAAR,GACpB,OAAO,qBAAKC,UAAW,YAAhB,SACND,EAAMS,SAASC,KAAI,SAAAN,GAAQ,OACxB,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,WCJfM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAW,SACPa,KAAK,SACLF,YAAaA,EACbG,SAAYF,MCiCLG,G,wDAnCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALJ,E,gEASO,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,+BAGpC,IAAD,SAC4BE,KAAKR,MAA/BR,EADF,EACEA,SAAUS,EADZ,EACYA,YACZQ,EAAkBjB,EAASkB,QAAO,SAAAC,GAAO,OAC7CA,EAAQtB,KAAKuB,cAAcC,SAASZ,EAAYW,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACA,oDACE,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAgB,SAAAkB,GAAM,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,WAE7D,cAAC,EAAD,CAAUxB,SAAUiB,W,GA7BRQ,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f07d6a3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card =(props) => (\r\n    <div className='card-containen'>\r\n        <img alt='monester' src={`https://robohash.org/${props.monester.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monester.name}</h2>\r\n        <p>{props.monester.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props =>  {\r\n    return <div className= 'card-list'>\r\n    {props.monsters.map(monester => (\r\n        <Card key={monester.id} monester={monester}/>\r\n    ))}\r\n    </div>;\r\n};","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n    className= 'search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange = {handleChange}\r\n    />\r\n);\r\n","import {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component'\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render(){\n    const { monsters, searchField } = this.state;\n    const filterdMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())  \n    );\n\n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n        <SearchBox\n        placeholder='Search Monsters'\n        handleChange = {e => {this.setState({searchField: e.target.value});}}\n        />\n      <CardList monsters={filterdMonsters}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}